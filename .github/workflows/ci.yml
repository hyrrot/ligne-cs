name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    defaults:
      run:
        working-directory: LigneCore
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: LigneCore                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: LigneCoreTest                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test --configuration ${{ matrix.configuration }} --results-directory TestResults --collect:"XPlat Code Coverage"

    # Find coverage file
    - name: Find coverage file
      id: find-coverage
      run: |-
        $file = Get-ChildItem -Path .\TestResults\*\coverage.cobertura.xml -File | Select-Object -First 1
        if ($file) {
          $unixPath = $file.FullName.Replace('\', '/')
          echo "::set-output name=coverageFilePath::$unixPath"
        } else {
          echo "No coverage file found"
          exit 1
        }

    # Generate code coverage reports
    - name: Generate code coverage reports
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }} 
        format: cobertura
        file: "${{ steps.find-coverage.outputs.coverageFilePath }}"
  tag:
    name: Add release tag
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Get version
        uses: technote-space/get-next-version-action@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create tag
        uses: actions/github-script@0.4.0
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${process.env.NEXT_VERSION}`,
              sha: context.sha
            })
      - name: Create a release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          tag_name: ${{ env.NEXT_VERSION }}
          release_name: ${{ env.NEXT_VERSION }}
          draft: false
          prerelease: false
      - name: Upload artifacts to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./LigneCore/bin/Release/net7.0/LigneCore.dll
          asset_name: LigneCore.dll
          asset_content_type: application/x-msdownload